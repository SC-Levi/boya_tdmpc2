
Loading data:   0%|                                                                             | 0/1 [00:00<?, ?it/s]
[34m[1mLogs will be synced with wandb.
Config(env_type='MooreMultiTask', n_contexts=30, obs_dim=24, action_dim=6, hidden_dim=256, n_experts=4, moore_temperature=1.0, use_softmax=True, gamma=0.99, stddev=0.1, actor_updates=1, use_ema=True, ensemble_size=5, update_freq=2, seed=42, device=device(type='cuda', index=0), task='mt30', obs='state', multitask=True, steps=10000000, batch_size=256, reward_coef=0.1, value_coef=0.1, consistency_coef=20, rho=0.5, lr=0.0003, enc_lr_scale=0.3, grad_clip_norm=20, tau=0.01, discount_denom=5, discount_min=0.95, discount_max=0.995, buffer_size=100000, exp_name='moore-tdmpc2-mt30', eval_freq=50000, eval_episodes=10, moore={'n_experts': 4, 'temperature': 1.0, 'use_softmax': True, 'debug_task_emb': False}, mpc=True, iterations=6, num_samples=512, num_elites=64, num_pi_trajs=24, horizon=3, min_std=0.05, max_std=2, temperature=0.5, log_std_min=-10, log_std_max=2, entropy_coef=0.0001, model_size=5, num_enc_layers=2, enc_dim=256, num_channels=32, mlp_dim=512, latent_dim=512, task_dim=64, num_q=5, dropout=0.01, simnorm_dim=8, num_bins=101, vmin=-10, vmax=10, wandb_project='moore-tdmpc2', wandb_entity='OA-MBRL', wandb_silent=False, enable_wandb=True, save_csv=True, save_video=False, save_agent=True, compile=False, work_dir=PosixPath('/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/logs/mt30/42/moore-tdmpc2-mt30'), task_title='MT30', tasks=['walker-stand', 'walker-walk', 'walker-run', 'cheetah-run', 'reacher-easy', 'reacher-hard', 'acrobot-swingup', 'pendulum-swingup', 'cartpole-balance', 'cartpole-balance-sparse', 'cartpole-swingup', 'cartpole-swingup-sparse', 'cup-catch', 'finger-spin', 'finger-turn-easy', 'finger-turn-hard', 'fish-swim', 'hopper-stand', 'hopper-hop', 'walker-walk-backwards', 'walker-run-backwards', 'cheetah-run-backwards', 'cheetah-run-front', 'cheetah-run-back', 'cheetah-jump', 'hopper-hop-backwards', 'reacher-three-easy', 'reacher-three-hard', 'cup-spin', 'pendulum-spin'], obs_shape={'state': (24,)}, episode_length=500, obs_shapes=[24, 24, 24, 17, 6, 6, 6, 3, 5, 5, 5, 5, 8, 9, 12, 12, 24, 15, 15, 24, 24, 17, 17, 17, 17, 15, 8, 8, 8, 3], episode_lengths=[500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500], seed_steps=2500, bin_size=0.2, data_dir='/media/levi/Singe4linux/Moore-TDMPC/TDMPC2/data/mt30')
Architecture: TD-MPC2 Moore World Model
Moore config: experts=4, temperature=0.5, softmax=True
Task Encoder: MooreTaskEncoder(obs_dim=24, latent_dim=512, hidden_dim=256, n_experts=4, temperature=1.0, use_softmax=True)
Dynamics: MoEDynamicsModel(latent_dim=512, action_dim=6, hidden_dim=256, n_experts=4, temperature=0.5, use_softmax=True)
Reward: MoERewardModel(latent_dim=512, action_dim=6, hidden_dim=256, n_experts=4, temperature=0.5, use_softmax=True, reward_dim=101)
Policy prior: Sequential(
  (0): Linear(in_features=512, out_features=256, bias=True)
  (1): ReLU()
  (2): Linear(in_features=256, out_features=256, bias=True)
  (3): ReLU()
  (4): Linear(in_features=256, out_features=12, bias=True)
)
Q-functions: Ensemble(n_models=5)
Learnable parameters: 4,125,162
[32m[1må¼€å§‹Moore-TDMPC2è®­ç»ƒ...
Found 1 files in /media/levi/Singe4linux/Moore-TDMPC/TDMPC2/data/mt30/*.pt
WARNING: expected 20 files for mt80 task set, 4 files for mt30 task set, found 1 files.
Buffer capacity: 345,690,000
Storage required: 47.01 GB

Loading data: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1/1 [00:04<00:00,  4.03s/it]
WARNING: buffer has 200000 episodes, expected 690000 episodes for mt30 task set.
Training agent for 10000000 iterations...
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
Evaluating:   0%|                                                                              | 0/30 [00:00<?, ?it/s]
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])





























Evaluating:  97%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‹  | 29/30 [16:13<00:34, 34.37s/it]
[33m[1mEvaluated agent on 30 tasks:
[33m  walker-stand          	R: 123.3
[33m  walker-walk           	R: 21.9
[33m  walker-run            	R: 23.7
[33m  cheetah-run           	R: 0.7
[33m  reacher-easy          	R: 114.3
[33m  reacher-hard          	R: 10.7
[33m  acrobot-swingup       	R: 0.4
[33m  pendulum-swingup      	R: 0.0
[33m  cartpole-balance      	R: 389.3
[33m  cartpole-balance-sparse	R: 67.8
[33m  cartpole-swingup      	R: 6.5
[33m  cartpole-swingup-sparse	R: 0.0
[33m  cup-catch             	R: 191.4
[33m  finger-spin           	R: 0.0
[33m  finger-turn-easy      	R: 267.5
[33m  finger-turn-hard      	R: 269.8
[33m  fish-swim             	R: 54.4
[33m  hopper-stand          	R: 2.8
[33m  hopper-hop            	R: 0.0
[33m  walker-walk-backwards 	R: 20.1
[33m  walker-run-backwards  	R: 19.6
[33m  cheetah-run-backwards 	R: 1.0
[33m  cheetah-run-front     	R: 6.5
[33m  cheetah-run-back      	R: 6.3
[33m  cheetah-jump          	R: 179.7
[33m  hopper-hop-backwards  	R: 0.0
[33m  reacher-three-easy    	R: 19.9
[33m  reacher-three-hard    	R: 0.0
[33m  cup-spin              	R: 52.1
[33m  pendulum-spin         	R: 94.7
[33m[1m  dmcontrol             	R: 64.8
 [33mpretrain[39m   [34mI:[39m 0            [34mT:[39m 0:00:21
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0

Evaluating: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 30/30 [16:47<00:00, 33.59s/it]
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])
[DEVICE-DEBUG] update_pi: qs device = cuda:0, info device = cuda:0
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])
[DEVICE-DEBUG] update_pi: qs device = cuda:0, info device = cuda:0
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])
[DEVICE-DEBUG] update_pi: qs device = cuda:0, info device = cuda:0
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])
[DEVICE-DEBUG] update_pi: qs device = cuda:0, info device = cuda:0
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])
[DEVICE-DEBUG] update_pi: qs device = cuda:0, info device = cuda:0
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])
[DEVICE-DEBUG] update_pi: qs device = cuda:0, info device = cuda:0
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])
[DEVICE-DEBUG] update_pi: qs device = cuda:0, info device = cuda:0
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])
[DEVICE-DEBUG] update_pi: qs device = cuda:0, info device = cuda:0
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])
[DEVICE-DEBUG] update_pi: qs device = cuda:0, info device = cuda:0
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
[DEBUG] _update: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: next_v_c.shape = torch.Size([3, 256, 512]), device = cuda:0
[DEBUG] _td_target: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _td_target: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _td_target: discount device = cuda:0, value = tensor([[0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900],
        [0.9900]], device='cuda:0')
[DEBUG] _td_target: q_values.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _td_target: final target shape = torch.Size([3, 256, 101]), device = cuda:0
[DEBUG] _update: td_targets.shape = torch.Size([3, 256, 101]), device = cuda:0
[DEVICE-DEBUG] update_pi: v_c_seq device = cuda:0, shape = torch.Size([4, 256, 512])
[DEVICE-DEBUG] update_pi: qs device = cuda:0, info device = cuda:0
[DEVICE-DEBUG] update: Buffer data - obs device: cuda:0, action device: cuda:0, reward device: cuda:0
[DEVICE-DEBUG] _update: model device = cuda:0
[DEVICE-DEBUG] _update: task device = cuda:0
[DEBUG] _update: obs.shape = torch.Size([4, 256, 24]), device = cuda:0
[DEBUG] _update: action.shape = torch.Size([3, 256, 6]), device = cuda:0
[DEBUG] _update: reward.shape = torch.Size([3, 256, 1]), device = cuda:0
[DEBUG] _update: task.shape = torch.Size([256])
Traceback (most recent call last):
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/train_moore.py", line 96, in <module>
    train()
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/train_moore.py", line 84, in train
    trainer.train()
  File "/home/levi/Documents/MOORE-TDMPC/TDMPC2/tdmpc2/trainer/offline_trainer.py", line 78, in train
    train_metrics = self.agent.update(self.buffer)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/train_moore_agent.py", line 868, in update
    return self._update(obs, action, reward, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/train_moore_agent.py", line 569, in _update
    next_v_c = self.model.encode(obs[1:], task)  # [horizon, batch_size, latent_dim]
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/world_model.py", line 205, in encode
    encoded = self.task_encoder(obs, task)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1740, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/task_encoder.py", line 114, in forward
    expert_feats = self.experts(flat_obs)              # [n_experts, N, latent]
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1740, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/layers.py", line 223, in forward
    self.n_experts, batch_size, self.output_dim,
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1740, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1740, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/layers.py", line 162, in forward
    if random_norm > self.eps:
KeyboardInterrupt