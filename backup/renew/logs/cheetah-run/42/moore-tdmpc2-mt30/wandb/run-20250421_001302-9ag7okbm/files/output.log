[34m[1mLogs will be synced with wandb.
Config(env_type='MooreMultiTask', n_contexts=1, obs_dim=17, action_dim=6, hidden_dim=256, n_experts=4, moore_temperature=1.0, use_softmax=True, use_checkpoint=True, use_mixed_precision=True, gamma=0.99, stddev=0.1, actor_updates=1, use_ema=True, ensemble_size=5, update_freq=2, seed=42, device=device(type='cuda', index=0), task='cheetah-run', obs='state', multitask=False, steps=10000, batch_size=256, reward_coef=0.1, value_coef=0.1, consistency_coef=20, rho=0.5, lr=0.0003, enc_lr_scale=0.3, grad_clip_norm=20, tau=0.01, discount_denom=5, discount_min=0.95, discount_max=0.995, buffer_size=100000, exp_name='moore-tdmpc2-mt30', eval_freq=50000, eval_episodes=10, moore={'n_experts': 4, 'temperature': 1.0, 'use_softmax': True, 'debug_task_emb': False}, mpc=True, iterations=6, num_samples=512, num_elites=64, num_pi_trajs=24, horizon=3, min_std=0.05, max_std=2, temperature=0.5, log_std_min=-10, log_std_max=2, entropy_coef=0.0001, model_size=5, num_enc_layers=2, enc_dim=256, num_channels=32, mlp_dim=512, latent_dim=512, task_dim=0, num_q=5, dropout=0.01, simnorm_dim=8, num_bins=101, vmin=-10, vmax=10, wandb_project='moore-tdmpc2', wandb_entity='OA-MBRL', wandb_silent=False, enable_wandb=True, save_csv=True, save_video=False, save_agent=True, compile=False, work_dir=PosixPath('/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/logs/cheetah-run/42/moore-tdmpc2-mt30'), task_title='Cheetah Run', tasks=['cheetah-run'], obs_shape={'state': (17,)}, episode_length=500, obs_shapes='???', episode_lengths='???', seed_steps=2500, bin_size=0.2, data_dir='/media/levi/Singe4linux/Moore-TDMPC/TDMPC2/data/mt30')
Architecture: TD-MPC2 Moore World Model
Task Encoder: MooreTaskEncoder(obs_dim=17, latent_dim=512, hidden_dim=256, n_experts=4, temperature=1.0, use_softmax=True)
Dynamics: MoEDynamicsModel(latent_dim=512, action_dim=6, hidden_dim=256, n_experts=4, temperature=0.5, use_softmax=True)
Reward: MoERewardModel(latent_dim=512, action_dim=6, hidden_dim=256, n_experts=4, temperature=0.5, use_softmax=True, reward_dim=101, top_k=1)
Policy prior: Sequential(
  (0): Linear(in_features=512, out_features=256, bias=True)
  (1): ReLU()
  (2): Linear(in_features=256, out_features=256, bias=True)
  (3): ReLU()
  (4): Linear(in_features=256, out_features=12, bias=True)
)
Q-functions: Ensemble(n_models=5)
Learnable parameters: 5,991,369
[32m[1mÂºÄÂßãMoore-TDMPC2ËÆ≠ÁªÉ...
[36mPROFILER STATUS: Enabled=True, Functions=2, Total Calls=3
[32mOnlineTrainer: Starting training loop with profiling enabled
[36mPROFILER STATUS: Enabled=True, Functions=2, Total Calls=3
[36mPROFILER: forward executed in 3.60ms (call 3)
 [32meval[39m    [34mE:[39m 0            [34mI:[39m 0            [34mR:[39m 0.8          [34mS:[39m 0.0          [34mT:[39m 0:00:09
 [34mtrain[39m   [34mE:[39m 0            [34mI:[39m 500          [34mR:[39m 4.0          [34mS:[39m 0.0          [34mT:[39m 0:00:09
Buffer capacity: 10,000
Storage required: 0.00 GB
Using CUDA:0 memory for storage.
 [34mtrain[39m   [34mE:[39m 1            [34mI:[39m 1,000        [34mR:[39m 5.9          [34mS:[39m 0.0          [34mT:[39m 0:00:09
 [34mtrain[39m   [34mE:[39m 2            [34mI:[39m 1,500        [34mR:[39m 14.5         [34mS:[39m 0.0          [34mT:[39m 0:00:09
 [34mtrain[39m   [34mE:[39m 3            [34mI:[39m 2,000        [34mR:[39m 5.2          [34mS:[39m 0.0          [34mT:[39m 0:00:09
 [34mtrain[39m   [34mE:[39m 4            [34mI:[39m 2,500        [34mR:[39m 3.8          [34mS:[39m 0.0          [34mT:[39m 0:00:09
Pretraining agent on seed data...
[DEBUG] ÂéüÂßã shapes - obs: (4, 256, 17), action: (3, 256, 6), reward: (3, 256, 1)
[DEBUG] Ê£ÄÊµãÂà∞ time‚Äëfirst Â∏ÉÂ±ÄÔºåÂ∑≤ËΩ¨ÁΩÆÂà∞ batch‚Äëfirst
[DEBUG] ËΩ¨ÁΩÆÂêé shapes - obs: (256, 4, 17), action: (256, 3, 6), reward: (256, 3, 1)
[TIME] encode:  617.08 ms
[36mPROFILER: _td_target executed in 0.06ms (call 1)
[TIME] td_target:  463.90 ms
[DEBUG] dynamics_vectorized inputs: z0=torch.Size([256, 512]), action_seq=torch.Size([256, 3, 6])
[DEBUG] dynamics_vectorized: z_b=torch.Size([256, 512]), a_bt=torch.Size([256, 3, 6])
[36mPROFILER: dynamics_forward executed in 162.02ms (call 1)
[36mPROFILER: dynamics_forward executed in 164.63ms (call 2)
[36mPROFILER: dynamics_forward executed in 163.55ms (call 3)
[DEBUG] Tensor formats: z_roll=torch.Size([256, 3, 512]), all_mu=torch.Size([256, 3, 6])
[TIME] rollout:  581.22 ms
[TIME] compute Q:   13.75 ms
[TIME] reward loss: 1937.98 ms
[TIME] value loss:    0.20 ms
[TIME] backward:   19.11 ms
[TIME] grad clipping:    4.22 ms
[TIME] optim.step:   29.65 ms
[TIME] _update total: 3668.32 ms
[36mPROFILER: _update executed in 3668.61ms (call 1)
[DEBUG] ÂéüÂßã shapes - obs: (4, 256, 17), action: (3, 256, 6), reward: (3, 256, 1)
[DEBUG] Ê£ÄÊµãÂà∞ time‚Äëfirst Â∏ÉÂ±ÄÔºåÂ∑≤ËΩ¨ÁΩÆÂà∞ batch‚Äëfirst
[DEBUG] ËΩ¨ÁΩÆÂêé shapes - obs: (256, 4, 17), action: (256, 3, 6), reward: (256, 3, 1)
[TIME] encode:  614.77 ms
[36mPROFILER: _td_target executed in 0.05ms (call 2)
[TIME] td_target:  463.28 ms
[DEBUG] dynamics_vectorized inputs: z0=torch.Size([256, 512]), action_seq=torch.Size([256, 3, 6])
[DEBUG] dynamics_vectorized: z_b=torch.Size([256, 512]), a_bt=torch.Size([256, 3, 6])
[DEBUG] Tensor formats: z_roll=torch.Size([256, 3, 512]), all_mu=torch.Size([256, 3, 6])
[TIME] rollout:  495.03 ms
[TIME] compute Q:    7.37 ms
[TIME] reward loss: 1673.26 ms
[TIME] value loss:    0.21 ms
[TIME] backward:    6.55 ms
[TIME] grad clipping:    0.72 ms
[TIME] optim.step:    0.79 ms
[TIME] _update total: 3262.93 ms
[36mPROFILER: _update executed in 3263.17ms (call 2)
[DEBUG] ÂéüÂßã shapes - obs: (4, 256, 17), action: (3, 256, 6), reward: (3, 256, 1)
[DEBUG] Ê£ÄÊµãÂà∞ time‚Äëfirst Â∏ÉÂ±ÄÔºåÂ∑≤ËΩ¨ÁΩÆÂà∞ batch‚Äëfirst
[DEBUG] ËΩ¨ÁΩÆÂêé shapes - obs: (256, 4, 17), action: (256, 3, 6), reward: (256, 3, 1)
[TIME] encode:  612.87 ms
[36mPROFILER: _td_target executed in 0.05ms (call 3)
[TIME] td_target:  464.50 ms
[DEBUG] dynamics_vectorized inputs: z0=torch.Size([256, 512]), action_seq=torch.Size([256, 3, 6])
[DEBUG] dynamics_vectorized: z_b=torch.Size([256, 512]), a_bt=torch.Size([256, 3, 6])
[DEBUG] Tensor formats: z_roll=torch.Size([256, 3, 512]), all_mu=torch.Size([256, 3, 6])
[TIME] rollout:  488.75 ms
[TIME] compute Q:    7.47 ms
[TIME] reward loss: 1069.79 ms
[TIME] value loss:    0.24 ms
[TIME] backward:    6.50 ms
[TIME] grad clipping:    0.71 ms
[TIME] optim.step:    0.90 ms
[TIME] _update total: 2652.84 ms
[36mPROFILER: _update executed in 2653.10ms (call 3)
[DEBUG] ÂéüÂßã shapes - obs: (4, 256, 17), action: (3, 256, 6), reward: (3, 256, 1)
[DEBUG] Ê£ÄÊµãÂà∞ time‚Äëfirst Â∏ÉÂ±ÄÔºåÂ∑≤ËΩ¨ÁΩÆÂà∞ batch‚Äëfirst
[DEBUG] ËΩ¨ÁΩÆÂêé shapes - obs: (256, 4, 17), action: (256, 3, 6), reward: (256, 3, 1)
[TIME] encode:  614.61 ms
[TIME] td_target:  464.94 ms
[DEBUG] dynamics_vectorized inputs: z0=torch.Size([256, 512]), action_seq=torch.Size([256, 3, 6])
[DEBUG] dynamics_vectorized: z_b=torch.Size([256, 512]), a_bt=torch.Size([256, 3, 6])
W0421 00:13:27.236876 4052763 site-packages/torch/_dynamo/convert_frame.py:897] [1/8] torch._dynamo hit config.cache_size_limit (8)
W0421 00:13:27.236876 4052763 site-packages/torch/_dynamo/convert_frame.py:897] [1/8]    function: 'torch_dynamo_resume_in__forward_flat_at_157' (/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/moe_rewards.py:157)
W0421 00:13:27.236876 4052763 site-packages/torch/_dynamo/convert_frame.py:897] [1/8]    last reason: 1/0: L['___stack1'] == 708477.928229479
W0421 00:13:27.236876 4052763 site-packages/torch/_dynamo/convert_frame.py:897] [1/8] To log all recompilation reasons, use TORCH_LOGS="recompiles".
W0421 00:13:27.236876 4052763 site-packages/torch/_dynamo/convert_frame.py:897] [1/8] To diagnose recompilation issues, see https://pytorch.org/docs/main/torch.compiler_troubleshooting.html.
[DEBUG] Tensor formats: z_roll=torch.Size([256, 3, 512]), all_mu=torch.Size([256, 3, 6])
[TIME] rollout:  487.81 ms
[TIME] compute Q:    7.00 ms
[TIME] reward loss:  476.14 ms
[TIME] value loss:    0.26 ms
[TIME] backward:    6.76 ms
[TIME] grad clipping:    0.78 ms
[TIME] optim.step:    0.86 ms
[TIME] _update total: 2060.52 ms
[DEBUG] ÂéüÂßã shapes - obs: (4, 256, 17), action: (3, 256, 6), reward: (3, 256, 1)
[DEBUG] Ê£ÄÊµãÂà∞ time‚Äëfirst Â∏ÉÂ±ÄÔºåÂ∑≤ËΩ¨ÁΩÆÂà∞ batch‚Äëfirst
[DEBUG] ËΩ¨ÁΩÆÂêé shapes - obs: (256, 4, 17), action: (256, 3, 6), reward: (256, 3, 1)
[TIME] encode:  619.06 ms
[TIME] td_target:  460.53 ms
[DEBUG] dynamics_vectorized inputs: z0=torch.Size([256, 512]), action_seq=torch.Size([256, 3, 6])
[DEBUG] dynamics_vectorized: z_b=torch.Size([256, 512]), a_bt=torch.Size([256, 3, 6])
[DEBUG] Tensor formats: z_roll=torch.Size([256, 3, 512]), all_mu=torch.Size([256, 3, 6])
[TIME] rollout:  489.85 ms
[TIME] compute Q:    7.23 ms
[TIME] reward loss:  475.12 ms
[TIME] value loss:    0.35 ms
[TIME] backward:    6.51 ms
[TIME] grad clipping:    0.69 ms
[TIME] optim.step:    0.83 ms
[TIME] _update total: 2061.72 ms
[DEBUG] ÂéüÂßã shapes - obs: (4, 256, 17), action: (3, 256, 6), reward: (3, 256, 1)
[DEBUG] Ê£ÄÊµãÂà∞ time‚Äëfirst Â∏ÉÂ±ÄÔºåÂ∑≤ËΩ¨ÁΩÆÂà∞ batch‚Äëfirst
[DEBUG] ËΩ¨ÁΩÆÂêé shapes - obs: (256, 4, 17), action: (256, 3, 6), reward: (256, 3, 1)
[TIME] encode:  602.80 ms
[TIME] td_target:  449.09 ms
[DEBUG] dynamics_vectorized inputs: z0=torch.Size([256, 512]), action_seq=torch.Size([256, 3, 6])
[DEBUG] dynamics_vectorized: z_b=torch.Size([256, 512]), a_bt=torch.Size([256, 3, 6])
[DEBUG] Tensor formats: z_roll=torch.Size([256, 3, 512]), all_mu=torch.Size([256, 3, 6])
[TIME] rollout:  480.78 ms
[TIME] compute Q:    6.96 ms
[TIME] reward loss:  460.86 ms
[TIME] value loss:    0.21 ms
[TIME] backward:    6.55 ms
[TIME] grad clipping:    0.80 ms
[TIME] optim.step:    0.80 ms
[TIME] _update total: 2010.05 ms
[DEBUG] ÂéüÂßã shapes - obs: (4, 256, 17), action: (3, 256, 6), reward: (3, 256, 1)
[DEBUG] Ê£ÄÊµãÂà∞ time‚Äëfirst Â∏ÉÂ±ÄÔºåÂ∑≤ËΩ¨ÁΩÆÂà∞ batch‚Äëfirst
[DEBUG] ËΩ¨ÁΩÆÂêé shapes - obs: (256, 4, 17), action: (256, 3, 6), reward: (256, 3, 1)
[TIME] encode:  610.30 ms
[TIME] td_target:  447.08 ms
[DEBUG] dynamics_vectorized inputs: z0=torch.Size([256, 512]), action_seq=torch.Size([256, 3, 6])
[DEBUG] dynamics_vectorized: z_b=torch.Size([256, 512]), a_bt=torch.Size([256, 3, 6])
[DEBUG] Tensor formats: z_roll=torch.Size([256, 3, 512]), all_mu=torch.Size([256, 3, 6])
[TIME] rollout:  481.66 ms
[TIME] compute Q:    7.04 ms
[TIME] reward loss:  463.76 ms
[TIME] value loss:    0.24 ms
[TIME] backward:    6.59 ms
[TIME] grad clipping:    0.71 ms
[TIME] optim.step:    0.81 ms
[TIME] _update total: 2019.46 ms
[DEBUG] ÂéüÂßã shapes - obs: (4, 256, 17), action: (3, 256, 6), reward: (3, 256, 1)
[DEBUG] Ê£ÄÊµãÂà∞ time‚Äëfirst Â∏ÉÂ±ÄÔºåÂ∑≤ËΩ¨ÁΩÆÂà∞ batch‚Äëfirst
[DEBUG] ËΩ¨ÁΩÆÂêé shapes - obs: (256, 4, 17), action: (256, 3, 6), reward: (256, 3, 1)
[TIME] encode:  600.53 ms
[TIME] td_target:  445.70 ms
[DEBUG] dynamics_vectorized inputs: z0=torch.Size([256, 512]), action_seq=torch.Size([256, 3, 6])
[DEBUG] dynamics_vectorized: z_b=torch.Size([256, 512]), a_bt=torch.Size([256, 3, 6])
[DEBUG] Tensor formats: z_roll=torch.Size([256, 3, 512]), all_mu=torch.Size([256, 3, 6])
[TIME] rollout:  480.38 ms
[TIME] compute Q:    6.84 ms
[TIME] reward loss:  475.86 ms
[TIME] value loss:    0.19 ms
[TIME] backward:    6.38 ms
[TIME] grad clipping:    0.67 ms
[TIME] optim.step:    0.82 ms
[TIME] _update total: 2018.69 ms
[DEBUG] ÂéüÂßã shapes - obs: (4, 256, 17), action: (3, 256, 6), reward: (3, 256, 1)
[DEBUG] Ê£ÄÊµãÂà∞ time‚Äëfirst Â∏ÉÂ±ÄÔºåÂ∑≤ËΩ¨ÁΩÆÂà∞ batch‚Äëfirst
[DEBUG] ËΩ¨ÁΩÆÂêé shapes - obs: (256, 4, 17), action: (256, 3, 6), reward: (256, 3, 1)
[TIME] encode:  603.30 ms
[TIME] td_target:  452.09 ms
[DEBUG] dynamics_vectorized inputs: z0=torch.Size([256, 512]), action_seq=torch.Size([256, 3, 6])
[DEBUG] dynamics_vectorized: z_b=torch.Size([256, 512]), a_bt=torch.Size([256, 3, 6])
[DEBUG] Tensor formats: z_roll=torch.Size([256, 3, 512]), all_mu=torch.Size([256, 3, 6])
[TIME] rollout:  485.21 ms
[TIME] compute Q:    7.07 ms
Traceback (most recent call last):
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/train_moore.py", line 162, in <module>
    train()
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/utils/profiler.py", line 28, in wrapper
    result = func(*args, **kwargs)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/train_moore.py", line 142, in train
    trainer.train()
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/utils/profiler.py", line 28, in wrapper
    result = func(*args, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/TDMPC2/algorithms/trainer/online_trainer.py", line 126, in train
    _train_metrics = self.agent.update(self.buffer)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/train_moore.py", line 75, in _patched_update
    return self._update(obs, action, reward, task=task)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/utils/profiler.py", line 28, in wrapper
    result = func(*args, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/utils/timer.py", line 94, in wrapper
    result = f(*args, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/train_moore_agent.py", line 821, in _update
    reward_output = self.model.reward(z_roll[:, t], action[:, t], task=task)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/world_model.py", line 270, in reward
    out = checkpoint(self._reward, z_a)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/_compile.py", line 32, in inner
    return disable_fn(*args, **kwargs)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/_dynamo/eval_frame.py", line 721, in _fn
    return fn(*args, **kwargs)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/utils/checkpoint.py", line 489, in checkpoint
    return CheckpointFunction.apply(function, preserve, *args)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/autograd/function.py", line 575, in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/utils/checkpoint.py", line 264, in forward
    outputs = run_function(*args)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1740, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/utils/profiler.py", line 28, in wrapper
    result = func(*args, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/moe_rewards.py", line 103, in forward
    return self._forward_flat_optimized(state_action)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/_dynamo/eval_frame.py", line 556, in _fn
    return fn(*args, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/moe_rewards.py", line 157, in _forward_flat
    t_start = time.perf_counter()
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/moe_rewards.py", line 213, in torch_dynamo_resume_in__forward_flat_at_157
    expert_feats = self.experts(projected_state_action)               # [E, N, R]
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1740, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1751, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/levi/Documents/MOORE-TDMPC/moore_tdmpc/layers.py", line 344, in forward
    proj = torch.sum(vi * vj_normalized) * vj_normalized
KeyboardInterrupt