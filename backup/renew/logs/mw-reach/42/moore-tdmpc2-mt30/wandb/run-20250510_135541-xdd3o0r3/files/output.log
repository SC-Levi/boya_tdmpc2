[34m[1mLogs will be synced with wandb.
Config(env_type='MooreMultiTask', n_contexts=30, obs_dim=39, action_dim=4, hidden_dim=256, n_experts=4, moore_temperature=0.5, use_softmax=True, use_checkpoint=False, use_mixed_precision=True, gamma=0.99, stddev=0.1, actor_updates=4, use_ema=True, ensemble_size=5, update_freq=4, seed=42, model_updates=1, pi_updates=1, bc_coef=0.1, adv_norm_eps=0.01, device=device(type='cuda', index=0), task='mw-reach', obs='state', multitask=False, steps=10000000, batch_size=256, reward_coef=0.1, value_coef=0.1, consistency_coef=10, rho=0.5, lr=0.0003, enc_lr_scale=0.3, grad_clip_norm=20, tau=0.01, discount_denom=5, discount_min=0.95, discount_max=0.995, buffer_size=1000000, exp_name='moore-tdmpc2-mt30', eval_freq=20000, eval_episodes=10, moore={'n_experts': 4, 'temperature': 0.5, 'use_softmax': True, 'debug_task_emb': False}, mpc=True, iterations=15, num_samples=512, num_elites=64, num_pi_trajs=24, horizon=7, min_std=0.05, max_std=2, temperature=0.5, log_std_min=-10, log_std_max=2, entropy_coef=0.0001, model_size=5, num_enc_layers=2, enc_dim=256, num_channels=32, mlp_dim=512, latent_dim=512, task_dim=0, num_q=5, dropout=0.01, simnorm_dim=8, num_bins=101, vmin=-10, vmax=10, wandb_project='moore-tdmpc2', wandb_entity='OA-MBRL', wandb_silent=False, enable_wandb=True, save_csv=True, save_video=False, save_agent=True, compile=False, compile_dynamics=False, compile_loss=False, work_dir=PosixPath('/home/levi/Desktop/MOORE-TDMPC/renew/logs/mw-reach/42/moore-tdmpc2-mt30'), task_title='Mw Reach', tasks=['mw-reach'], obs_shape={'state': (39,)}, episode_length=100, obs_shapes='???', episode_lengths='???', seed_steps=1000, bin_size=0.2, data_dir='/media/levi/Singe4linux/Moore-TDMPC/TDMPC2/data/mt30')
Architecture: MooreWorldModel(total_params=5177393, latent_dim=512, action_dim=4, n_experts=4, temperature=0.5)
Task Encoder: MooreTaskEncoder(obs_dim=39, latent_dim=512, hidden_dim=256, n_experts=4, temperature=0.5, use_softmax=True)
Transition-Reward Core: MoETransitionRewardModel(latent_dim=512, action_dim=4, hidden_dim=256, n_experts=4, temperature=0.5, use_softmax=True, reward_dim=101, fused_head=True, use_mixed_precision=True)
Policy prior: Sequential(
  (0): Linear(in_features=512, out_features=256, bias=True)
  (1): ReLU()
  (2): Linear(in_features=256, out_features=256, bias=True)
  (3): ReLU()
  (4): Linear(in_features=256, out_features=8, bias=True)
)
Q-functions: Ensemble(n_models=5)
[32m[1må¼€å§‹Moore-TDMPC2è®­ç»ƒ...
[32mOnlineTrainer: Starting training loop with profiling enabled
[36mPROFILER STATUS: Enabled=True, Functions=0, Total Calls=0
[36mPROFILER: forward executed in 32.10ms (call 1)
[36mPROFILER: forward executed in 0.29ms (call 2)
[36mPROFILER: forward executed in 0.31ms (call 3)
 [32meval[39m    [34mE:[39m 0            [34mI:[39m 0            [34mR:[39m 115.2        [34mS:[39m 0.0          [34mT:[39m 0:00:42
 [34mtrain[39m   [34mE:[39m 0            [34mI:[39m 100          [34mR:[39m 364.9        [34mS:[39m 0.0          [34mT:[39m 0:00:42
Buffer capacity: 1,000,000
Storage required: 0.18 GB
Using CUDA:0 memory for storage.
 [34mtrain[39m   [34mE:[39m 1            [34mI:[39m 200          [34mR:[39m 315.7        [34mS:[39m 0.0          [34mT:[39m 0:00:42
 [34mtrain[39m   [34mE:[39m 2            [34mI:[39m 300          [34mR:[39m 605.1        [34mS:[39m 0.0          [34mT:[39m 0:00:42
 [34mtrain[39m   [34mE:[39m 3            [34mI:[39m 400          [34mR:[39m 347.1        [34mS:[39m 0.0          [34mT:[39m 0:00:42
 [34mtrain[39m   [34mE:[39m 4            [34mI:[39m 500          [34mR:[39m 319.2        [34mS:[39m 0.0          [34mT:[39m 0:00:42
 [34mtrain[39m   [34mE:[39m 5            [34mI:[39m 600          [34mR:[39m 274.8        [34mS:[39m 0.0          [34mT:[39m 0:00:42
 [34mtrain[39m   [34mE:[39m 6            [34mI:[39m 700          [34mR:[39m 276.7        [34mS:[39m 0.0          [34mT:[39m 0:00:42
 [34mtrain[39m   [34mE:[39m 7            [34mI:[39m 800          [34mR:[39m 190.2        [34mS:[39m 0.0          [34mT:[39m 0:00:43
 [34mtrain[39m   [34mE:[39m 8            [34mI:[39m 900          [34mR:[39m 547.0        [34mS:[39m 0.0          [34mT:[39m 0:00:43
 [34mtrain[39m   [34mE:[39m 9            [34mI:[39m 1,000        [34mR:[39m 361.1        [34mS:[39m 0.0          [34mT:[39m 0:00:43
Pretraining agent on seed data...
tensor(-2.5094e-05, device='cuda:0')
tensor(-2.5093e-05, device='cuda:0')
tensor(-2.5088e-05, device='cuda:0')
tensor(-2.5068e-05, device='cuda:0')
tensor(-2.5022e-05, device='cuda:0')
tensor(-2.4947e-05, device='cuda:0')
tensor(-2.4845e-05, device='cuda:0')
tensor(-2.4715e-05, device='cuda:0')
tensor(-2.4554e-05, device='cuda:0')
tensor(-2.4361e-05, device='cuda:0')
tensor(-2.4133e-05, device='cuda:0')
tensor(-2.3869e-05, device='cuda:0')
tensor(-2.3567e-05, device='cuda:0')
tensor(-2.3226e-05, device='cuda:0')
tensor(-2.2843e-05, device='cuda:0')
tensor(-2.2417e-05, device='cuda:0')
tensor(-2.1945e-05, device='cuda:0')
tensor(-2.1425e-05, device='cuda:0')
tensor(-2.0856e-05, device='cuda:0')
tensor(-2.0236e-05, device='cuda:0')
tensor(-1.9564e-05, device='cuda:0')
tensor(-1.8838e-05, device='cuda:0')
tensor(-1.8056e-05, device='cuda:0')
tensor(-1.7217e-05, device='cuda:0')
tensor(-1.6320e-05, device='cuda:0')
tensor(-1.5366e-05, device='cuda:0')
tensor(-1.4351e-05, device='cuda:0')
tensor(-1.3276e-05, device='cuda:0')
tensor(-1.2139e-05, device='cuda:0')
tensor(-1.0941e-05, device='cuda:0')
tensor(-9.6799e-06, device='cuda:0')
tensor(-8.3574e-06, device='cuda:0')
tensor(-6.9756e-06, device='cuda:0')
tensor(-5.5381e-06, device='cuda:0')
tensor(-4.0504e-06, device='cuda:0')
tensor(-2.5187e-06, device='cuda:0')
tensor(-9.4931e-07, device='cuda:0')
tensor(6.5100e-07, device='cuda:0')
tensor(2.2769e-06, device='cuda:0')
tensor(3.9223e-06, device='cuda:0')
tensor(5.5814e-06, device='cuda:0')
tensor(7.2499e-06, device='cuda:0')
tensor(8.9221e-06, device='cuda:0')
tensor(1.0594e-05, device='cuda:0')
tensor(1.2262e-05, device='cuda:0')
tensor(1.3924e-05, device='cuda:0')
tensor(1.5578e-05, device='cuda:0')
tensor(1.7222e-05, device='cuda:0')
tensor(1.8853e-05, device='cuda:0')
tensor(2.0471e-05, device='cuda:0')
tensor(2.2075e-05, device='cuda:0')
tensor(2.3662e-05, device='cuda:0')
tensor(2.5234e-05, device='cuda:0')
tensor(2.6790e-05, device='cuda:0')
tensor(2.8328e-05, device='cuda:0')
tensor(2.9850e-05, device='cuda:0')
tensor(3.1354e-05, device='cuda:0')
tensor(3.2841e-05, device='cuda:0')
tensor(3.4310e-05, device='cuda:0')
tensor(3.5761e-05, device='cuda:0')
tensor(3.7196e-05, device='cuda:0')
tensor(3.8615e-05, device='cuda:0')
tensor(4.0019e-05, device='cuda:0')
tensor(4.1407e-05, device='cuda:0')
tensor(4.2780e-05, device='cuda:0')
tensor(4.4139e-05, device='cuda:0')
tensor(4.5484e-05, device='cuda:0')
tensor(4.6815e-05, device='cuda:0')
tensor(4.8132e-05, device='cuda:0')
tensor(4.9436e-05, device='cuda:0')
tensor(5.0727e-05, device='cuda:0')
tensor(5.2005e-05, device='cuda:0')
tensor(5.3270e-05, device='cuda:0')
tensor(5.4524e-05, device='cuda:0')
tensor(5.5767e-05, device='cuda:0')
tensor(5.6997e-05, device='cuda:0')
tensor(5.8215e-05, device='cuda:0')
tensor(5.9420e-05, device='cuda:0')
tensor(6.0613e-05, device='cuda:0')
tensor(6.1792e-05, device='cuda:0')
tensor(6.2959e-05, device='cuda:0')
tensor(6.4113e-05, device='cuda:0')
tensor(6.5255e-05, device='cuda:0')
tensor(6.6386e-05, device='cuda:0')
tensor(6.7504e-05, device='cuda:0')
tensor(6.8612e-05, device='cuda:0')
tensor(6.9710e-05, device='cuda:0')
tensor(7.0797e-05, device='cuda:0')
tensor(7.1874e-05, device='cuda:0')
tensor(7.2940e-05, device='cuda:0')
tensor(7.3996e-05, device='cuda:0')
tensor(7.5040e-05, device='cuda:0')
tensor(7.6073e-05, device='cuda:0')
tensor(7.7095e-05, device='cuda:0')
tensor(7.8106e-05, device='cuda:0')
tensor(7.9107e-05, device='cuda:0')
tensor(8.0097e-05, device='cuda:0')
tensor(8.1077e-05, device='cuda:0')
tensor(8.2047e-05, device='cuda:0')
tensor(8.3009e-05, device='cuda:0')
tensor(8.3962e-05, device='cuda:0')
tensor(8.4906e-05, device='cuda:0')
tensor(8.5843e-05, device='cuda:0')
tensor(8.6772e-05, device='cuda:0')
tensor(8.7693e-05, device='cuda:0')
tensor(8.8607e-05, device='cuda:0')
tensor(8.9514e-05, device='cuda:0')
tensor(9.0413e-05, device='cuda:0')
tensor(9.1304e-05, device='cuda:0')
tensor(9.2188e-05, device='cuda:0')
tensor(9.3064e-05, device='cuda:0')
tensor(9.3933e-05, device='cuda:0')
tensor(9.4794e-05, device='cuda:0')
tensor(9.5650e-05, device='cuda:0')
tensor(9.6501e-05, device='cuda:0')
tensor(9.7347e-05, device='cuda:0')
tensor(9.8189e-05, device='cuda:0')
tensor(9.9028e-05, device='cuda:0')
tensor(9.9863e-05, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0001, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
tensor(0.0002, device='cuda:0')
Traceback (most recent call last):
  File "/home/levi/Desktop/MOORE-TDMPC/renew/train_with_cprofile.py", line 171, in <module>
    train()
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/levi/Desktop/MOORE-TDMPC/renew/train_with_cprofile.py", line 158, in train
    trainer.train()
  File "/home/levi/Desktop/MOORE-TDMPC/renew/utils/profiler.py", line 28, in wrapper
    result = func(*args, **kwargs)
  File "/home/levi/Desktop/MOORE-TDMPC/renew/trainer/online_trainer.py", line 126, in train
    _train_metrics = self.agent.update(self.buffer)
  File "/home/levi/Desktop/MOORE-TDMPC/renew/train_moore_agent.py", line 580, in update
  File "/home/levi/Desktop/MOORE-TDMPC/renew/train_moore_agent.py", line 467, in update_model
    self.scaler.scale(total_loss).backward()
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/_tensor.py", line 624, in backward
    torch.autograd.backward(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
  File "/home/levi/anaconda3/envs/tdmpc2/lib/python3.9/site-packages/torch/autograd/graph.py", line 825, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt